import java.util.*;
class Main {
  static int[][] board = {{ 3, 0, 6, 5, 0, 8, 4, 0, 0 },
                          { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 8, 7, 0, 0, 0, 0, 3, 1 },
                          { 0, 0, 3, 0, 1, 0, 0, 8, 0 },
                          { 9, 0, 0, 8, 6, 3, 0, 0, 5 },
                          { 0, 5, 0, 0, 9, 0, 6, 0, 0 },
                          { 1, 3, 0, 0, 0, 0, 2, 5, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 7, 4 },
                          { 0, 0, 5, 2, 0, 6, 3, 0, 0 } };
  public static void main(String[] args) {
    solve(board);
    System.out.println(Arrays.deepToString(board));
  }

  public static boolean solve(int[][] board){
    //loop through the board, cell by cell
    for (int i = 0; i < board.length; i++){
      for (int j = 0; j < board[i].length; j++){
        //is my cell empty?
        if (board[i][j] == 0){
          //try all possible numbers
          for (int k = 1; k <= 9; k++){
            //take a guess
            board[i][j] = k;
            //check if the move we just made was legal
            if (isValid(board, i, j) && solve(board)){ //call the method AGAIN with the new board
              return true;
            }
            //Invalid move - reset
            board[i][j] = 0;
          }
          return false;  //timeline is over
        }
      }
    }
    return true;  //we did it!
  }

  public static boolean isValid(int[][] board, int i , int j){
    int val= board[i][j]; //what number did I place
    int count= 0;
    //Checks the columns if they have the same number as specified place
    for(int col=0; col<board[i].length; col++){
      if(board[i][col]==val){
        count++;
      }
    }
    if(count>=2){
      return false;
    }

    //Resetting count
    count=0;

    //Checks the row if they have the same number as specified place 
    for(int row=0; row<board.length; row++){
      if(board[row][j]==val){
        count++;
      }
      
    }
    if(count>=2){
      return false;
    }
count=0;
    int topr= (int) Math.floor(i/3)*3;
    int topc= (int) Math.floor(j/3)*3;

    for(int r= topr; r<topr+3;r++){
      for(int c=topc; c<topc+3; c++){
        if(board[r][c]==val){
          count++;
        }
      }
    }
    if(count>=2){
      return false;
    }





    
    
    return true;

 

    
  }
  

  
}
